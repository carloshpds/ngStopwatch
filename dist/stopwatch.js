(function() {
  angular.module('ngStopwatch.services', []);

  angular.module('ngStopwatch.scripts', ['ngStopwatch.services']);

  angular.module('ngStopwatch', ['ngStopwatch.scripts']);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0E7RUFBQSxPQUFPLENBQUMsTUFBUixDQUFlLHNCQUFmLEVBQTJDLEVBQTNDOztFQU1BLE9BQU8sQ0FBQyxNQUFSLENBQWUscUJBQWYsRUFBMkMsQ0FDekMsc0JBRHlDLENBQTNDOztFQVFBLE9BQU8sQ0FBQyxNQUFSLENBQWUsYUFBZixFQUE4QixDQUM1QixxQkFENEIsQ0FBOUI7QUFkQSIsImZpbGUiOiJtb2R1bGUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuIyBNb2R1bGVzXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuYW5ndWxhci5tb2R1bGUgJ25nU3RvcHdhdGNoLnNlcnZpY2VzJyAgICAsIFtdXG5cblxuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiMgU2NyaXB0cyBNb2R1bGVcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5hbmd1bGFyLm1vZHVsZSAnbmdTdG9wd2F0Y2guc2NyaXB0cycgICAgICwgW1xuICAnbmdTdG9wd2F0Y2guc2VydmljZXMnXG5dXG5cblxuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiMgTWFpbiBNb2R1bGVcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5hbmd1bGFyLm1vZHVsZSAnbmdTdG9wd2F0Y2gnLCBbXG4gICduZ1N0b3B3YXRjaC5zY3JpcHRzJ1xuICBdIl19
(function() {
  angular.module('ngStopwatch.services').service('stopwatch', ["$interval", function($interval) {
    var API, StopWatch, idController;
    idController = 0;
    StopWatch = (function() {
      function StopWatch(config) {
        var initial;
        this.id = ++idController;
        this.lapStarted = null;
        initial = {
          name: "timer" + idController,
          created: new Date().getTime(),
          current: 0,
          stopped: null,
          laps: [],
          currentLap: 0,
          lastLap: null,
          refreshRate: 100,
          running: false,
          autoRefresh: true
        };
        angular.merge(this, initial);
        this.interval = null;
        angular.merge(this, config);
        if (this.autoRefresh) {
          this.trackCurrent();
        }
        this.start();
      }

      StopWatch.prototype.getTime = function() {
        if (this.running) {
          this.stop();
        }
        return this.current;
      };

      StopWatch.prototype.start = function() {
        if (this.running) {
          return;
        }
        this.running = true;
        this.lastStart = new Date().getTime();
        if (!!this.autoRefresh) {
          return this.trackCurrent();
        }
      };

      StopWatch.prototype.stop = function() {
        var now;
        $interval.cancel(this.interval);
        this.interval = null;
        now = new Date().getTime();
        if (!this.running) {
          return;
        }
        this.running = false;
        this.stopped = now;
        this.current += this.stopped - this.lastStart;
        return this.currentLap += this.stopped - this.lastStart;
      };

      StopWatch.prototype.reset = function() {
        angular.merge(this, {
          current: 0,
          stopped: null,
          laps: [],
          currentLap: 0,
          lastLap: null
        });
        return this.laps = [];
      };

      StopWatch.prototype.lap = function() {
        var now;
        if (!this.running) {
          return;
        }
        $interval.cancel(this.interval);
        this.interval = null;
        now = new Date().getTime();
        if (!this.autoRefresh) {
          this.current += now - this.lastStart;
          this.currentLap += now - this.lastStart;
          this.lastStart = now;
        }
        this.lastLap = this.currentLap;
        this.currentLap = 0;
        this.laps.push(this.lastLap);
        if (!!this.autoRefresh) {
          return this.trackCurrent();
        }
      };

      StopWatch.prototype.trackCurrent = function() {
        var self;
        if (this.running) {
          self = this;
          return this.interval = $interval(function() {
            var now;
            now = new Date().getTime();
            self.current += now - self.lastStart;
            self.currentLap += now - self.lastStart;
            return self.lastStart = now;
          }, this.refreshRate);
        } else {
          $interval.cancel(this.interval);
          return this.interval = null;
        }
      };

      return StopWatch;

    })();
    return API = {
      create: function(config) {
        return new StopWatch(config);
      }
    };
  }]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvc2VydmljZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFBQSxPQUFPLENBQUMsTUFBUixDQUFlLHNCQUFmLENBQ0EsQ0FBQyxPQURELENBQ1MsV0FEVCxFQUNzQixTQUFDLFNBQUQ7QUFDcEIsUUFBQTtJQUFBLFlBQUEsR0FBZTtJQUNUO01BQ1MsbUJBQUMsTUFBRDtBQUNYLFlBQUE7UUFBQSxJQUFDLENBQUEsRUFBRCxHQUFNLEVBQUU7UUFDUixJQUFDLENBQUEsVUFBRCxHQUFjO1FBRWQsT0FBQSxHQUFVO1VBQ1IsSUFBQSxFQUFNLE9BQUEsR0FBUSxZQUROO1VBRVIsT0FBQSxFQUFhLElBQUEsSUFBQSxDQUFBLENBQU0sQ0FBQyxPQUFQLENBQUEsQ0FGTDtVQUdSLE9BQUEsRUFBUyxDQUhEO1VBSVIsT0FBQSxFQUFTLElBSkQ7VUFLUixJQUFBLEVBQU0sRUFMRTtVQU1SLFVBQUEsRUFBWSxDQU5KO1VBT1IsT0FBQSxFQUFTLElBUEQ7VUFRUixXQUFBLEVBQWEsR0FSTDtVQVNSLE9BQUEsRUFBUyxLQVREO1VBVVIsV0FBQSxFQUFhLElBVkw7O1FBYVYsT0FBTyxDQUFDLEtBQVIsQ0FBYyxJQUFkLEVBQWlCLE9BQWpCO1FBQ0EsSUFBQyxDQUFBLFFBQUQsR0FBWTtRQUVaLE9BQU8sQ0FBQyxLQUFSLENBQWMsSUFBZCxFQUFpQixNQUFqQjtRQUdBLElBQUcsSUFBQyxDQUFBLFdBQUo7VUFDRSxJQUFDLENBQUEsWUFBRCxDQUFBLEVBREY7O1FBR0EsSUFBQyxDQUFBLEtBQUQsQ0FBQTtNQTFCVzs7MEJBNkJiLE9BQUEsR0FBUyxTQUFBO1FBQ1AsSUFBRyxJQUFDLENBQUEsT0FBSjtVQUNFLElBQUMsQ0FBQSxJQUFELENBQUEsRUFERjs7QUFHQSxlQUFPLElBQUMsQ0FBQTtNQUpEOzswQkFNVCxLQUFBLEdBQU8sU0FBQTtRQUNMLElBQVUsSUFBQyxDQUFBLE9BQVg7QUFBQSxpQkFBQTs7UUFDQSxJQUFDLENBQUEsT0FB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Iiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUgJ25nU3RvcHdhdGNoLnNlcnZpY2VzJ1xuLnNlcnZpY2UgJ3N0b3B3YXRjaCcsICgkaW50ZXJ2YWwpLT5cbiAgaWRDb250cm9sbGVyID0gMFxuICBjbGFzcyBTdG9wV2F0Y2hcbiAgICBjb25zdHJ1Y3RvcjogKGNvbmZpZyktPlxuICAgICAgQGlkID0gKytpZENvbnRyb2xsZXJcbiAgICAgIEBsYXBTdGFydGVkID0gbnVsbFxuXG4gICAgICBpbml0aWFsID0ge1xuICAgICAgICBuYW1lOiBcInRpbWVyI3tpZENvbnRyb2xsZXJ9XCJcbiAgICAgICAgY3JlYXRlZDogbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgICAgY3VycmVudDogMFxuICAgICAgICBzdG9wcGVkOiBudWxsXG4gICAgICAgIGxhcHM6IFtdXG4gICAgICAgIGN1cnJlbnRMYXA6IDBcbiAgICAgICAgbGFzdExhcDogbnVsbFxuICAgICAgICByZWZyZXNoUmF0ZTogMTAwXG4gICAgICAgIHJ1bm5pbmc6IGZhbHNlXG4gICAgICAgIGF1dG9SZWZyZXNoOiB0cnVlXG4gICAgICB9XG5cbiAgICAgIGFuZ3VsYXIubWVyZ2UgQCwgaW5pdGlhbFxuICAgICAgQGludGVydmFsID0gbnVsbFxuXG4gICAgICBhbmd1bGFyLm1lcmdlIEAsIGNvbmZpZ1xuXG5cbiAgICAgIGlmIEBhdXRvUmVmcmVzaFxuICAgICAgICBAdHJhY2tDdXJyZW50KClcblxuICAgICAgQHN0YXJ0KClcblxuXG4gICAgZ2V0VGltZTogLT5cbiAgICAgIGlmIEBydW5uaW5nXG4gICAgICAgIEBzdG9wKClcblxuICAgICAgcmV0dXJuIEBjdXJyZW50XG5cbiAgICBzdGFydDogLT5cbiAgICAgIHJldHVybiBpZiBAcnVubmluZ1xuICAgICAgQHJ1bm5pbmcgPSB0cnVlXG4gICAgICBAbGFzdFN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcblxuICAgICAgdW5sZXNzICFAYXV0b1JlZnJlc2hcbiAgICAgICAgQHRyYWNrQ3VycmVudCgpXG5cbiAgICBzdG9wOiAtPlxuICAgICAgJGludGVydmFsLmNhbmNlbChAaW50ZXJ2YWwpXG4gICAgICBAaW50ZXJ2YWwgPSBudWxsXG4gICAgICBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgcmV0dXJuIGlmICFAcnVubmluZ1xuICAgICAgQHJ1bm5pbmcgPSBmYWxzZVxuICAgICAgQHN0b3BwZWQgPSBub3dcblxuICAgICAgQGN1cnJlbnQgKz0gQHN0b3BwZWQgLSBAbGFzdFN0YXJ0XG4gICAgICBAY3VycmVudExhcCArPSBAc3RvcHBlZCAtIEBsYXN0U3RhcnRcblxuICAgIHJlc2V0OiAtPlxuICAgICAgYW5ndWxhci5tZXJnZSBALCB7XG4gICAgICAgIGN1cnJlbnQ6IDBcbiAgICAgICAgc3RvcHBlZDogbnVsbFxuICAgICAgICBsYXBzOiBbXVxuICAgICAgICBjdXJyZW50TGFwOiAwXG4gICAgICAgIGxhc3RMYXA6IG51bGxcbiAgICAgIH1cblxuICAgICAgQGxhcHMgPSBbXVxuXG5cbiAgICBsYXA6IC0+XG4gICAgICByZXR1cm4gaWYgIUBydW5uaW5nXG4gICAgICAkaW50ZXJ2YWwuY2FuY2VsKEBpbnRlcnZhbCkgIyBjYW5jZWwgYW55IHBlbmRpbmcgdHJhY2tpbmdcbiAgICAgIEBpbnRlcnZhbCA9IG51bGxcbiAgICAgIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICBpZiAhQGF1dG9SZWZyZXNoXG4gICAgICAgIEBjdXJyZW50ICs9IG5vdyAtIEBsYXN0U3RhcnRcbiAgICAgICAgQGN1cnJlbnRMYXAgKz0gbm93IC0gQGxhc3RTdGFydFxuICAgICAgICBAbGFzdFN0YXJ0ID0gbm93XG5cbiAgICAgIEBsYXN0TGFwID0gQGN1cnJlbnRMYXBcbiAgICAgIEBjdXJyZW50TGFwID0gMFxuICAgICAgQGxhcHMucHVzaCBAbGFzdExhcFxuXG4gICAgICB1bmxlc3MgIUBhdXRvUmVmcmVzaFxuICAgICAgICBAdHJhY2tDdXJyZW50KClcblxuICAgIHRyYWNrQ3VycmVudDogKCktPlxuICAgICAgaWYgQHJ1bm5pbmdcbiAgICAgICAgc2VsZiA9IEBcbiAgICAgICAgQGludGVydmFsID0gJGludGVydmFsIC0+XG4gICAgICAgICAgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgICAgICBzZWxmLmN1cnJlbnQgKz0gbm93IC0gc2VsZi5sYXN0U3RhcnRcbiAgICAgICAgICBzZWxmLmN1cnJlbnRMYXAgKz0gbm93IC0gc2VsZi5sYXN0U3RhcnRcbiAgICAgICAgICBzZWxmLmxhc3RTdGFydCA9IG5vd1xuICAgICAgICAsIEByZWZyZXNoUmF0ZVxuXG4gICAgICBlbHNlXG4gICAgICAgICRpbnRlcnZhbC5jYW5jZWwoQGludGVydmFsKVxuICAgICAgICBAaW50ZXJ2YWwgPSBudWxsXG5cblxuXG5cblxuICByZXR1cm4gQVBJID0ge1xuICAgIGNyZWF0ZTogKGNvbmZpZyktPlxuICAgICAgcmV0dXJuIG5ldyBTdG9wV2F0Y2goY29uZmlnKVxuICB9XG4iXX0=